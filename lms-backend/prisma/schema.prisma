generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id                String             @id @default(cuid())
  email             String             @unique
  name              String
  password          String
  role              Role               @default(USER)
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  loans             Loan[]
  enrollments       Enrollment[]
  fees              Fee[]
  payments          Payment[]
  examRegistrations ExamRegistration[]
  orders            Order[]
  student           Student?
}

enum Role {
  USER
  ADMIN
  SUPER_ADMIN
  ADMIN_LIBRARY
  ADMIN_UNIFORMS
  ADMIN_STATIONERY
  ADMIN_ADMISSION
}

model Student {
  id              String    @id @default(cuid())
  userId          String    @unique
  rollNumber      String    @unique
  admissionDate   DateTime
  profileImageUrl String?

  user            User      @relation(fields: [userId], references: [id])
}

model Book {
  id                String       @id @default(cuid())
  title             String
  isbn              String       @unique
  publishedDate     DateTime
  totalQuantity     Int
  availableQuantity Int
  createdAt         DateTime     @default(now())
  updatedAt         DateTime     @updatedAt
  authors           BookAuthor[]
  loans             Loan[]
}

model Author {
  id        String       @id @default(cuid())
  name      String
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
  books     BookAuthor[]
}

model BookAuthor {
  book       Book     @relation(fields: [bookId], references: [id])
  bookId     String
  author     Author   @relation(fields: [authorId], references: [id])
  authorId   String
  assignedAt DateTime @default(now())

  @@id([bookId, authorId])
}

model Loan {
  id           String    @id @default(cuid())
  bookId       String
  userId       String
  checkoutDate DateTime  @default(now())
  dueDate      DateTime
  returnDate   DateTime?

  book         Book      @relation(fields: [bookId], references: [id])
  user         User      @relation(fields: [userId], references: [id])

  @@index([bookId])
  @@index([userId])
}

model Course {
  id          String       @id @default(cuid())
  title       String       @unique
  description String?
  courseCode  String       @unique
  credits     Int
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  enrollments Enrollment[]
  fees        Fee[]
  exams       Exam[]
  admissions  Admission[]
}

model Enrollment {
  id         String   @id @default(cuid())
  userId     String
  courseId   String
  enrolledAt DateTime @default(now())
  grade      String?

  user       User     @relation(fields: [userId], references: [id])
  course     Course   @relation(fields: [courseId], references: [id])

  @@unique([userId, courseId])
}

model Fee {
  id       String    @id @default(cuid())
  userId   String
  courseId String
  amount   Float
  dueDate  DateTime
  isPaid   Boolean   @default(false)

  user     User      @relation(fields: [userId], references: [id])
  course   Course    @relation(fields: [courseId], references: [id])
  payments Payment[]
}

model Payment {
  id          String   @id @default(cuid())
  feeId       String
  userId      String
  amount      Float
  paymentDate DateTime @default(now())

  fee        Fee      @relation(fields: [feeId], references: [id])
  user       User     @relation(fields: [userId], references: [id])
}

model Exam {
  id            String             @id @default(cuid())
  courseId      String
  title         String
  date          DateTime
  
  course        Course             @relation(fields: [courseId], references: [id])
  registrations ExamRegistration[]
}

model ExamRegistration {
  id           String   @id @default(cuid())
  userId       String
  examId       String
  registeredAt DateTime @default(now())

  user         User     @relation(fields: [userId], references: [id])
  exam         Exam     @relation(fields: [examId], references: [id])

  @@unique([userId, examId])
}

model InventoryItem {
  id          String      @id @default(cuid())
  name        String      @unique
  description String?
  type        ItemType
  price       Float
  stock       Int
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  orderItems  OrderItem[]
}

enum ItemType {
  UNIFORM
  STATIONERY
}

model Order {
  id        String      @id @default(cuid())
  userId    String
  status    OrderStatus @default(PENDING)
  createdAt DateTime    @default(now())
  
  user      User        @relation(fields: [userId], references: [id])
  items     OrderItem[]
}

enum OrderStatus {
  PENDING
  COMPLETED
  CANCELLED
}

model OrderItem {
  id           String        @id @default(cuid())
  orderId      String
  itemId       String
  quantity     Int
  priceAtOrder Float

  order        Order         @relation(fields: [orderId], references: [id])
  item         InventoryItem @relation(fields: [itemId], references: [id])
}

model Admission {
  id                  String   @id @default(cuid())
  fullName            String
  fatherName          String
  motherName          String
  birthDate           DateTime
  gender              String
  fullAddress         String
  religion            String?
  nationality         String?
  phoneNumber         String
  email               String   @unique
  bloodGroup          String?
  tenthPercentage     Float
  twelfthPercentage   Float
  guardianPhoneNumber String
  courseId            String
  password            String
  imageUrl            String
  status              String   @default("PENDING")
  createdAt           DateTime @default(now())

  course              Course   @relation(fields: [courseId], references: [id])
}