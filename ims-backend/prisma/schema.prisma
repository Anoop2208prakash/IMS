generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// --- Enums ---
enum Role {
  STUDENT
  TEACHER
  ADMIN
  ADMIN_LIBRARY
  ADMIN_ADMISSION
  ADMIN_FINANCE
  SUPER_ADMIN
}

enum AttendanceStatus {
  PRESENT
  ABSENT
  LATE
}

enum FeeInvoiceStatus {
  PENDING
  PAID
  OVERDUE
  CANCELLED
}

enum ItemCategory {
  UNIFORM
  STATIONARY
  OTHER
}

enum OrderStatus {
  PENDING
  COMPLETED
  CANCELLED
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

enum MaritalStatus {
  SINGLE
  MARRIED
}

// --- Main Models ---
model User {
  id                   String       @id @default(cuid())
  sID                  String       @unique
  email                String       @unique
  name                 String
  password             String
  role                 Role         @default(STUDENT)
  createdAt            DateTime     @default(now())
  updatedAt            DateTime     @updatedAt
  
  passwordResetToken   String?      @unique
  passwordResetExpires DateTime?

  student              Student?
  teacher              Teacher?
  enrollments          Enrollment[]
  
  // assignments          SubjectAssignment[] @relation("TeacherAssignments") // <-- REMOVED
  taughtSubjects       Subject[]           @relation("TeacherSubjects") // <-- ADDED

  loans                Loan[]
  studentAttendance    Attendance[]        @relation("StudentAttendance")
  markedAttendance     Attendance[]        @relation("TeacherAttendance")
  examResults          ExamResult[]        @relation("StudentResults")
  enteredExamResults   ExamResult[]        @relation("TeacherEnteredResults")
  invoices             FeeInvoice[]
  payments             FeePayment[]
  inventoryIssuances   InventoryIssuance[]
  orders               Order[]
  announcements        Announcement[]
}

model Student {
  id               String        @id @default(cuid())
  userId           String        @unique
  user             User          @relation(fields: [userId], references: [id])
  admissionDate    DateTime

  fatherName       String?
  motherName       String?
  dateOfBirth      DateTime?
  gender           Gender?
  presentAddress   String?       @db.Text
  permanentAddress String?       @db.Text
  religion         String?
  nationality      String?
  phoneNumber      String?       @unique
  nidNumber        String?       @unique
  bloodGroup       String?
  occupation       String?
  maritalStatus    MaritalStatus?
  photoUrl         String?
}

model Teacher {
  id          String   @id @default(cuid())
  userId      String   @unique
  department  String
  dateJoined  DateTime
  user        User     @relation(fields: [userId], references: [id])
}

// --- Academic Structure ---
model Program {
  id            String         @id @default(cuid())
  title         String         @unique
  description   String?        @db.Text
  durationYears Int            
  
  semesters     Semester[]
  feeStructures FeeStructure[]
}

model Semester {
  id        String    @id @default(cuid())
  name      String
  programId String
  program   Program   @relation(fields: [programId], references: [id])
  
  subjects  Subject[]
  @@unique([programId, name])
}

model Subject {
  id                String       @id @default(cuid())
  title             String
  subjectCode       String       @unique
  credits           Int
  semesterId        String
  semester          Semester     @relation(fields: [semesterId], references: [id])

  // --- THIS IS THE FIX ---
  teacherId         String?      // 1. Add optional foreign key
  teacher           User?        @relation("TeacherSubjects", fields: [teacherId], references: [id])
  // -----------------------
  
  enrollments       Enrollment[]
  // assignments       SubjectAssignment[] // <-- REMOVED
  attendanceRecords Attendance[]
  examResults       ExamResult[]
}

// --- Refactored Relations ---
model Enrollment {
  id         String   @id @default(cuid())
  userId     String
  user       User     @relation(fields: [userId], references: [id])
  subjectId  String
  subject    Subject  @relation(fields: [subjectId], references: [id])
  enrolledAt DateTime @default(now())

  @@unique([userId, subjectId])
}

// --- THIS MODEL IS NOW DELETED ---
// model SubjectAssignment {
//   id         String   @id @default(cuid())
//   teacherId  String
//   teacher    User     @relation("TeacherAssignments", fields: [teacherId], references: [id])
//   subjectId  String
//   subject    Subject  @relation(fields: [subjectId], references: [id])
//   assignedAt DateTime @default(now())
// 
//   @@unique([teacherId, subjectId])
// }
// ---------------------------------

model Attendance {
  id           String           @id @default(cuid())
  date         DateTime
  status       AttendanceStatus
  
  studentId    String
  student      User             @relation("StudentAttendance", fields: [studentId], references: [id])
  
  subjectId    String
  subject      Subject          @relation(fields: [subjectId], references: [id])
  
  markedById   String
  markedBy     User             @relation("TeacherAttendance", fields: [markedById], references: [id])
  createdAt    DateTime         @default(now())

  @@unique([date, studentId, subjectId])
}

model ExamResult {
  id            String   @id @default(cuid())
  marksObtained Float
  
  studentId     String
  student       User     @relation("StudentResults", fields: [studentId], references: [id])
  
  subjectId     String
  subject       Subject  @relation(fields: [subjectId], references: [id])
  
  examId        String
  exam          Exam     @relation(fields: [examId], references: [id])

  enteredById   String
  enteredBy     User     @relation("TeacherEnteredResults", fields: [enteredById], references: [id])
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@unique([studentId, subjectId, examId])
}

model FeeStructure {
  id        String       @id @default(cuid())
  name      String
  amount    Float
  programId String
  program   Program      @relation(fields: [programId], references: [id])
  invoices  FeeInvoice[]
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
}

// --- Library Models (Unchanged) ---
model Book {
  id                String       @id @default(cuid())
  title             String
  isbn              String       @unique
  publishedDate     DateTime
  totalQuantity     Int
  availableQuantity Int
  createdAt         DateTime     @default(now())
  updatedAt         DateTime     @updatedAt
  
  authors           BookAuthor[]
  loans             Loan[]
}

model Author {
  id        String       @id @default(cuid())
  name      String
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
  
  books     BookAuthor[]
}

model BookAuthor {
  book     Book     @relation(fields: [bookId], references: [id])
  bookId   String
  author   Author   @relation(fields: [authorId], references: [id])
  authorId String

  @@id([bookId, authorId])
}

model Loan {
  id           String    @id @default(cuid())
  bookId       String
  userId       String
  checkoutDate DateTime  @default(now())
  dueDate      DateTime
  returnDate   DateTime?

  book Book @relation(fields: [bookId], references: [id])
  user User @relation(fields: [userId], references: [id])
}

// --- Other Models (Unchanged) ---
model Exam {
  id          String       @id @default(cuid())
  name        String       @unique
  date        DateTime
  totalMarks  Int          @default(100)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  
  results     ExamResult[]
}

model FeeInvoice {
  id             String           @id @default(cuid())
  userId         String
  user           User             @relation(fields: [userId], references: [id])
  feeStructureId String
  feeStructure   FeeStructure     @relation(fields: [feeStructureId], references: [id])
  amount         Float
  dueDate        DateTime
  status         FeeInvoiceStatus @default(PENDING)
  payments       FeePayment[]
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
}

model FeePayment {
  id            String     @id @default(cuid())
  invoiceId     String
  invoice       FeeInvoice @relation(fields: [invoiceId], references: [id])
  userId        String
  user          User       @relation(fields: [userId], references: [id])
  amount        Float
  paymentDate   DateTime   @default(now())
  method        String
  transactionId String?    @unique
  createdAt     DateTime   @default(now())
}

model InventoryItem {
  id                String              @id @default(cuid())
  name              String
  category          ItemCategory
  price             Float
  quantityInStock   Int
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  
  issuances         InventoryIssuance[]
  orderItems        OrderItem[]
}

model InventoryIssuance {
  id             String        @id @default(cuid())
  itemId         String
  item           InventoryItem @relation(fields: [itemId], references: [id])
  userId         String
  user           User          @relation(fields: [userId], references: [id])
  quantityIssued Int
  dateIssued     DateTime      @default(now())
}

model Order {
  id          String      @id @default(cuid())
  orderId     String      @unique @default(cuid())
  userId      String
  user        User        @relation(fields: [userId], references: [id])
  totalAmount Float
  status      OrderStatus @default(PENDING)
  createdAt   DateTime    @default(now())
  
  items       OrderItem[]
}

model OrderItem {
  id                    String        @id @default(cuid())
  orderId               String
  order                 Order         @relation(fields: [orderId], references: [id])
  itemId                String
  item                  InventoryItem @relation(fields: [itemId], references: [id])
  quantity              Int
  priceAtTimeOfPurchase Float
}

model Announcement {
  id        String   @id @default(cuid())
  title     String
  content   String   @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  authorId  String
  author    User     @relation(fields: [authorId], references: [id])
}